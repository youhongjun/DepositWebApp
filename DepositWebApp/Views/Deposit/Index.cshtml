@{
    ViewData["Title"] = "Deposits";
}


<h1>@ViewData["Title"]</h1>

<div class="container">
    <div class="col-xs-12 col-sm-6 col-md-8">
        <div class="row">
            <div class="col-xs-6">
                <p>I want to &nbsp;</p>
            </div>
            <div class="col-xs-6">
                <select class="deposit-action">
                    <option value="Hold" selected="selected">Hold</option>
                    <option value="Buy">Buy</option>
                    <option value="Sell">Sell</option>
                </select>
            </div>
        </div>
    </div>
    <div class="col-xs-12 col-sm-6 col-md-8">
        <div class="row">
            <p>Sum of all Maturity Amounts: <label id="lbTotal">$0.00</label></p>
        </div>
    </div>

<div class="container">
    <br />
    <div style="width:90%; margin:0 auto;">
        <table id="deposits" class="table table-striped table-bordered dt-responsive nowrap" width="100%" cellspacing="0">
            <thead>
                <tr>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Principal</th>
                    <th>Term (Years)</th>
                    <th>Interest Rate</th>
                    <th>Maturity Amount</th>
                </tr>
            </thead>
            @*<tfoot>
                <tr>
                    <th colspan="5" style="text-align:right">Total:</th>
                    <th style="text-align:right"></th>
                </tr>
            </tfoot>*@
        </table>
    </div>
</div>

<script>
    var refreshInterval;
    var timer = false;
    var table;

    $(document).ready(function () {
        table = $("#deposits").DataTable({
            "processing": false,
            "serverSide": true,
            "filter": false,
            "orderMulti": false,
            "pageLength": 100,
            "ajax": {
                "url": "/Deposit/LoadData",
                "type": "POST",
                "datatype": "json",
                "dataSrc": function (json) {
                    var l = formatCurrency(json.totalMaturityAmount);
                    $("#lbTotal").html("<b>" + l + "</b>");
                    return json.data;
                }
            },
            //"footerCallback": function (row, data, start, end, display) {
            //    var api = this.api(), data;

            //    var intVal = function (i) {
            //        return typeof i === 'string' ?
            //            i.replace(/[\$,]/g, '') * 1 :
            //            typeof i === 'number' ?
            //                i : 0;
            //    };

            //    total = api
            //        .column(5)
            //        .data()
            //        .reduce(function (a, b) {
            //            return intVal(a) + intVal(b);
            //        }, 0);

            //    pageTotal = api
            //        .column(5, { page: 'current' })
            //        .data()
            //        .reduce(function (a, b) {
            //            return intVal(a) + intVal(b);
            //        }, 0);

            //    $(api.column(5).footer()).html(
            //        //formatCurrency(pageTotal) + '<br>(' + formatCurrency(total) + ' total)'
            //        formatCurrency(pageTotal)
            //    );
            //},
            "columnDefs": [
                {
                    targets: -4,
                    className: 'dt-body-right'
                },
                {
                    targets: -3,
                    className: 'dt-body-right'
                },
                {
                    targets: -2,
                    className: 'dt-body-right'
                },
                {
                    targets: -1,
                    className: 'dt-body-right'
                },
            ],
            "columns": [
                {
                    "data": "startDate",
                    "render": function (data, type, row, meta) {
                        return formatDate(data);
                    },
                    "name": "StartDate",
                },
                {
                    "data": "endDate",
                    "render": function (data, type, row, meta) {
                        return formatDate(data);
                    },
                    "name": "EndDate",
                },
                {
                    "data": "principal",
                    "render": function (data, type, row, meta) {
                        return formatCurrency(data);
                    },
                    "name": "Principal",
                },
                {
                    "data": "termInYears",
                    "name": "TermInYears",
                },
                {
                    "data": "interestRate",
                    "render": function (data, type, row, meta) {
                        return formatPercentage(data);
                    },
                    "name": "InterestRate",
                },
                {
                    "data": "maturityAmount",
                    "render": function (data, type, row, meta) {
                        return formatCurrency(data);
                    },
                    "name": "MaturityAmount",
                },
            ]
        });

        $('.deposit-action').on('change', function () {
            this.disabled = true;
            depositChange(this.value);
            this.disabled = false;
        });
    });

    function depositChange(action) {
        if (action == "Hold") {
            if (timer) {
                clearInterval(refreshInterval);
                timer = false;
            }
        }
        else {
            $.ajax({
                url: 'Deposit/AjaxCall',
                contentType: "application/json; charset=utf-8",
                data: { a: action },
                dataType: "json",
                success: function (responce) {
                    table.ajax.reload(function (json) {
                        if ((action == "Buy" && json.totalMaturityAmount >= 120 * 1000 * 1000)
                            || (action == "Sell" && json.totalMaturityAmount <= 50 * 1000 * 1000)) {
                            if (timer) {
                                clearInterval(refreshInterval);
                                timer = false;
                            }
                        }
                        else if (!timer) {
                            refreshInterval = setInterval(function () {
                                depositChange(action);
                            }, 5000);
                            timer = true;
                        }
                    }, false);
                },
                error: function (responce) {
                    alert(responce);
                }
            });
        }
   }

    var defopt = {
        times: 1,
        point: 2,
        float: false,
        emptyZero: false,
    };

    function zeroString(count) {
        var str = '', i;
        for (i = 0; i < count; i++) {
            str += '0';
        }
        return str;
    }

    function formatCurrency(val, options) {
        var opt = $.extend({}, defopt, options);
        val = val || 0;
        if (val == 0 && opt.emptyZero) return '';

        var fmt = '$0,0';
        if (opt.point > 0) {
            fmt += '.' + zeroString(opt.point);
        }
        return numeral(val / (opt.times || 1)).format(fmt)
    }

    function formatDate(d) {
        date = new Date(d)
        var dd = date.getDate();
        var mm = date.getMonth() + 1;
        var yyyy = date.getFullYear();
        if (dd < 10) { dd = '0' + dd }
        if (mm < 10) { mm = '0' + mm };
        return d = dd + '/' + mm + '/' + yyyy
    }

    function formatPercentage(val, options) {
        var opt = $.extend({}, defopt, options);
        val = val || 0;
        if (val == 0 && opt.emptyZero) return '';

        var fmt = '0,0';
        if (opt.point > 0) {
            fmt += '.' + zeroString(opt.point) + '%';
        }
        return numeral(val / (opt.times || 1)).format(fmt)
    }
</script>